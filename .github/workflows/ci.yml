name: "CI"

on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
      redis:
        image: redis
        ports:
          - 6379/tcp
    env:
      RAILS_ENV: test
      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./www
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
      - run: npm ci
      - name: Set up database schema
        run: bin/rails db:schema:load
        working-directory: ./www
      - name: Run rspec tests
        run: bundle exec rspec
        working-directory: ./www
        env:
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
      - name: Run Cypress E2E tests
        run: bin/rake cypress:run
        working-directory: ./www
        env:
          CYPRESS_RAILS_CYPRESS_OPTS: "--e2e --browser chrome"
          CYPRESS_RAILS_PORT: "3090"
          REDIS_PORT: ${{ job.services.redis.ports[6379] }}


  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: ./www
#       - name: Security audit dependencies
#         run: bin/bundler-audit --update
#       - name: Security audit application code
#         run: bin/brakeman -q -w2
      - name: Lint Ruby files
        run: bundle exec rubocop --parallel
        working-directory: ./www

  deploy_www_staging:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && !contains(github.event.commits[0].message, '[admin]') }}
    env:
      SCALINGO_TOKEN: ${{ secrets.SCALINGO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Scalingo CLI
        run: curl -O https://cli-dl.scalingo.com/install && bash install
      - name: Scalingo login api token
        run: scalingo login --api-token $SCALINGO_TOKEN
      - name: Deploy www to staging
        run: ./scripts/deploy.sh www staging

  deploy_www_prod:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && !contains(github.event.commits[0].message, '[admin]') }}
    env:
      SCALINGO_TOKEN: ${{ secrets.SCALINGO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Scalingo CLI
        run: curl -O https://cli-dl.scalingo.com/install && bash install
      - name: Scalingo login api token
        run: scalingo login --api-token $SCALINGO_TOKEN
      - name: Deploy www to prod
        run: ./scripts/deploy.sh www prod

  deploy_admin_staging:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && contains(github.event.commits[0].message, '[admin]') }}
    env:
      SCALINGO_TOKEN: ${{ secrets.SCALINGO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Scalingo CLI
        run: curl -O https://cli-dl.scalingo.com/install && bash install
      - name: Scalingo login api token
        run: scalingo login --api-token $SCALINGO_TOKEN
      - name: Deploy admin to staging
        run: ./scripts/deploy.sh admin admin-staging

  deploy_admin_prod:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && contains(github.event.commits[0].message, '[admin]') }}
    env:
      SCALINGO_TOKEN: ${{ secrets.SCALINGO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Scalingo CLI
        run: curl -O https://cli-dl.scalingo.com/install && bash install
      - name: Scalingo login api token
        run: scalingo login --api-token $SCALINGO_TOKEN
      - name: Deploy admin to prod
        run: ./scripts/deploy.sh admin admin-prod
